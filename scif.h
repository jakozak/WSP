/** \mainpage Driver Overview
  *
  * \section section_drv_info Driver Information
  * This Sensor Controller Interface driver has been generated by the Texas Instruments Sensor Controller
  * Studio tool:
  * - <b>Project name</b>:     Wireless Sensor Platform
  * - <b>Project file</b>:     C:/Users/Kuba/Documents/Texas Instruments/Sensor Controller Studio/projects/WSPv2.1/wireless_sensor_platform_sensor_controller.scp
  * - <b>Code prefix</b>:      -
  * - <b>Operating system</b>: TI-RTOS
  * - <b>Tool version</b>:     1.3.0.42428
  * - <b>Tool patches</b>:     None
  * - <b>Target chip</b>:      CC2630, revision -, package QFN48 7x7 RGZ
  * - <b>Created</b>:          2017-10-02 15:50:02.466
  * - <b>Computer</b>:         DESKTOP-82SLKJ1
  * - <b>User</b>:             Kuba
  *
  * No user-provided resource definitions were used to generate this driver.
  *
  * No user-provided procedure definitions were used to generate this driver.
  *
  * Do not edit the generated source code files other than temporarily for debug purposes. Any
  * modifications will be overwritten by the Sensor Controller Studio when generating new output.
  *
  * \section section_drv_modules Driver Modules
  * The driver is divided into three modules:
  * - \ref module_scif_generic_interface, providing the API for:
  *     - Initializing and uninitializing the driver
  *     - Task control (for starting, stopping and executing Sensor Controller tasks)
  *     - Task data exchange (for producing input data to and consume output data from Sensor Controller
  *       tasks)
  * - \ref module_scif_driver_setup, containing:
  *     - The AUX RAM image (i.e. Sensor Controller code and data)
  *     - I/O mapping information
  *     - Task data structure information
  *     - Driver setup data, to be used in the driver initialization
  *     - Project-specific functionality
  * - \ref module_scif_osal, for flexible OS support:
  *     - Interfaces with the selected operating system
  *
  * It is possible to use output from multiple Sensor Controller Studio projects in one application. Only
  * one driver setup may be active at a time, but it is possible to switch between these setups. When
  * using this option, there is one instance of the \ref module_scif_generic_interface and
  * \ref module_scif_osal modules, and multiple instances of the \ref module_scif_driver_setup module.
  * This requires that:
  * - The outputs must be generated using the same version of Sensor Controller Studio
  * - The outputs must use the same operating system
  * - The outputs must use different source code prefixes (inserted into all globals of the
  *   \ref module_scif_driver_setup)
  *
  *
  * \section section_project_info Project Description
  * Read data from I2C sensors and ADC by low power Sensor Controller. Part of the Wireless Sensor
  * Platform project.
  *
  *
  * \subsection section_io_mapping I/O Mapping
  * Task I/O functions are mapped to the following pins:
  * - I2C and ADC Sensors:
  *     - <b>A: Output from analog pressure sensor</b>: DIO23
  *     - <b>A: Battery voltage through resistor divider</b>: DIO30
  *     - <b>O: Sensors power domain enable</b>: DIO27
  *     - <b>I2C SCL</b>: DIO25
  *     - <b>I2C SDA</b>: DIO24
  *
  *
  * \section section_task_info Task Description(s)
  * This driver supports the following task(s):
  *
  *
  * \subsection section_task_desc_i2c_and_adc_sensors I2C and ADC Sensors
  * Read data from ADC and I2C sesnors
  *
  */




/** \addtogroup module_scif_driver_setup Driver Setup
  *
  * \section section_driver_setup_overview Overview
  *
  * This driver setup instance has been generated for:
  * - <b>Project name</b>:     Wireless Sensor Platform
  * - <b>Code prefix</b>:      -
  *
  * The driver setup module contains the generated output from the Sensor Controller Studio project:
  * - Location of task control and scheduling data structures in AUX RAM
  * - The AUX RAM image, and the size the image
  * - Task data structure information (location, size and buffer count)
  * - I/O pin mapping translation table
  * - Task resource initialization and uninitialization functions
  *
  * @{
  */
#ifndef SCIF_H
#define SCIF_H

#include <stdint.h>
#include <stdbool.h>
#include "scif_framework.h"
#include "scif_osal_tirtos.h"


/// Target chip name
#define SCIF_TARGET_CHIP_NAME_CC2630
/// Target chip package
#define SCIF_TARGET_CHIP_PACKAGE_QFN48_7X7_RGZ

/// Number of tasks implemented by this driver
#define SCIF_TASK_COUNT 1

/// I2C and ADC Sensors: Task ID
#define SCIF_I2C_AND_ADC_SENSORS_TASK_ID 0


/// I2C and ADC Sensors: HSHCAL I2C address
#define SCIF_I2C_AND_ADC_SENSORS_HSHCAL_ADDR 24
/// I2C and ADC Sensors: HSHCAL force state configuration
#define SCIF_I2C_AND_ADC_SENSORS_HSHCAL_CMD_MANUAL 66
/// I2C and ADC Sensors: HSHCAL start measurment in force state command
#define SCIF_I2C_AND_ADC_SENSORS_HSHCAL_CMD_START 49
/// I2C and ADC Sensors: HSHCAL configuration register
#define SCIF_I2C_AND_ADC_SENSORS_HSHCAL_REG_CFG 27
/// I2C and ADC Sensors: HSHCAL result register
#define SCIF_I2C_AND_ADC_SENSORS_HSHCAL_REG_RES 16
/// I2C and ADC Sensors: HSPPAD I2C address
#define SCIF_I2C_AND_ADC_SENSORS_HSPPAD_ADDR 72
/// I2C and ADC Sensors: HSPPAD start measurement command
#define SCIF_I2C_AND_ADC_SENSORS_HSPPAD_CMD_START 172
/// I2C and ADC Sensors: HSPPAD status byte
#define SCIF_I2C_AND_ADC_SENSORS_HSPPAD_STATUS_OK 96
/// I2C and ADC Sensors: HSUDDD I2C address
#define SCIF_I2C_AND_ADC_SENSORS_HSUDDD_ADDR 13
/// I2C and ADC Sensors: HSUDDD active mode command
#define SCIF_I2C_AND_ADC_SENSORS_HSUDDD_CMD_ACTIVE 162
/// I2C and ADC Sensors: HSUDDD stand-by command
#define SCIF_I2C_AND_ADC_SENSORS_HSUDDD_CMD_STANDBY 34
/// I2C and ADC Sensors: HSUDDD start measurment in force state command
#define SCIF_I2C_AND_ADC_SENSORS_HSUDDD_CMD_START 64
/// I2C and ADC Sensors: HSUDDD control register 1
#define SCIF_I2C_AND_ADC_SENSORS_HSUDDD_REG_CFG1 27
/// I2C and ADC Sensors: HSUDDD control register 2
#define SCIF_I2C_AND_ADC_SENSORS_HSUDDD_REG_CFG2 29
/// I2C and ADC Sensors: HSUDDD result register
#define SCIF_I2C_AND_ADC_SENSORS_HSUDDD_REG_RES 16
/// I2C and ADC Sensors: OPT3001 I2C address
#define SCIF_I2C_AND_ADC_SENSORS_OPT3001_ADDR 68
/// I2C and ADC Sensors: OPT3001 configuration triggering 100 ms single conversion
#define SCIF_I2C_AND_ADC_SENSORS_OPT3001_CFG_ONE_SHOT 49680
/// I2C and ADC Sensors: OPT3001 configuration at shutdown
#define SCIF_I2C_AND_ADC_SENSORS_OPT3001_CFG_SHUTDOWN 51216
/// I2C and ADC Sensors: OPT3001 configuration register
#define SCIF_I2C_AND_ADC_SENSORS_OPT3001_REG_CFG 1
/// I2C and ADC Sensors: OPT3001 result register
#define SCIF_I2C_AND_ADC_SENSORS_OPT3001_REG_RES 0
/// I2C and ADC Sensors I/O mapping: Output from analog pressure sensor
#define SCIF_I2C_AND_ADC_SENSORS_DIO_A_APS_OUTPUT 23
/// I2C and ADC Sensors I/O mapping: Battery voltage through resistor divider
#define SCIF_I2C_AND_ADC_SENSORS_DIO_A_VBATT 30
/// I2C and ADC Sensors I/O mapping: Sensors power domain enable
#define SCIF_I2C_AND_ADC_SENSORS_DIO_O_SENSOR_POWER_EN 27
/// I2C and ADC Sensors I/O mapping: I2C SCL
#define SCIF_I2C_AND_ADC_SENSORS_DIO_I2C_SCL 25
/// I2C and ADC Sensors I/O mapping: I2C SDA
#define SCIF_I2C_AND_ADC_SENSORS_DIO_I2C_SDA 24


// All shared data structures in AUX RAM need to be packed
#pragma pack(push, 2)


/// I2C and ADC Sensors: Task output data structure
typedef struct {
    uint16_t adcValue;         ///< ADC Value
    uint16_t batteryValue;     ///< Battery voltage through resistor divider
    uint16_t hshcalHumiValue;  ///< HSHCAL humidity measurement result
    uint16_t hshcalTempValue;  ///< HSHCAL temperature measurement result
    uint16_t hsppadPressValue; ///< HSPPAD pressure measurement result
    uint16_t hsppadTempValue;  ///< HSPPAD temperature measurement result
    uint16_t hsudddUvbValue;   ///< HSUDDD UVB measurement result
    uint16_t illuValue;        ///< Opt3001 illuminance measurement result
} SCIF_I2C_AND_ADC_SENSORS_OUTPUT_T;


/// I2C and ADC Sensors: Task state structure
typedef struct {
    uint16_t i2cStatus; ///< I2C master status
} SCIF_I2C_AND_ADC_SENSORS_STATE_T;


/// Sensor Controller task data (configuration, input buffer(s), output buffer(s) and internal state)
typedef struct {
    struct {
        SCIF_I2C_AND_ADC_SENSORS_OUTPUT_T output;
        SCIF_I2C_AND_ADC_SENSORS_STATE_T state;
    } i2cAndAdcSensors;
} SCIF_TASK_DATA_T;

/// Sensor Controller task generic control (located in AUX RAM)
#define scifTaskData    (*((volatile SCIF_TASK_DATA_T*) 0x400E00E6))


// Initialized internal driver data, to be used in the call to \ref scifInit()
extern const SCIF_DATA_T scifDriverSetup;


// Restore previous struct packing setting
#pragma pack(pop)


// AUX I/O re-initialization functions
void scifReinitTaskIo(uint32_t bvTaskIds);


// RTC-based tick generation control
void scifStartRtcTicks(uint32_t tickStart, uint32_t tickPeriod);
void scifStartRtcTicksNow(uint32_t tickPeriod);
void scifStopRtcTicks(void);


#endif
//@}


// Generated by DESKTOP-82SLKJ1 at 2017-10-02 15:50:02.466
